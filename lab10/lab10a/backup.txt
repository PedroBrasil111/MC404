puts_backup:
    # storing registers
    addi sp, sp, -16
    sw ra, 0(sp)
    sw s1, 4(sp)
    sw s2, 8(sp)
    # writing string
    mv s1, a0       # s1 <= string address
    li s2, 0     # stop condition (null chracter)
    # loops for each digit until it reaches null character
    1:
        lbu t1, (s1)       # t1 is the current character being written
        beq t1, s2, 1f
        li a0, 1           # string size
        mv a1, s1          # string address
        jal write          # write digit to stdout
        addi s1, s1, 1
        j 1b
    1:
    li a0, 1
    la a1, br
    jal write       # write line break
    # restoring registers
    lw ra, 0(sp)
    lw s1, 4(sp)
    lw s2, 8(sp)
    addi sp, sp, 16
    ret

# Parameters: a0 - value to be converted to a string
#             a1 - address where to store the resulting null-terminated string
#             a2 - numerical base used to represent the value as a string
# Return value: a0 - a pointer to the resulting null-terminated string
itoa:
    # converting number to ascii and stacking its digits
    addi sp, sp, -1
    li t0, 0          # stack null character (last byte)
    sb t0, (sp)
    li t1, 10         # base 10
    li t2, 0          # t2 indicates whether the number is negative (1) or positive (0)
    li t3, 1          # t3 is the number's length in ascii digits (including 0)
    bgez a0, not_negative
    li t2, 1
    sub a0, x0, a0    # a0 is the absolute value of the number
    not_negative:
    # loops for each digit
    1:
        rem t0, a0, t1      # t0 is the last digit of a0
        addi t0, t0, '0'    # turn into ascii character
        addi sp, sp, -1     # update sp
        sb t0, (sp)         # stack digit
        addi t3, t3, 1      # increment length
        divu a0, a0, t1     # divide number by 10 (remove last digit)
        beqz a0, 1f         # if a0 == 0, there's no more digits to stack
        j 1b
    1:
    # treating negative case
    beqz t2, cp_num    # if not negative, jump to wr_num
    addi sp, sp, -1
    li t0, '-'
    sb t0, (sp)        # stack minus sign if number is negative
    addi t3, t3, 1     # increment length
    cp_num:
    # copying to the parameter address
    mv a0, a1
    mv t0, t3 # t0 <= length
    mv t1, sp # address of current digit
    1:
        beqz t0, 1f # if counter == 0 then end loop
        lbu t2, (t1)
        sb t2, (a1)
        addi t0, t0, -1 # update counter
        addi t1, t1, 1 # update address
        addi a1, a1, 1 # update address
        j 1b
    1:
    # popping digits from stack
    add sp, sp, t3
    ret